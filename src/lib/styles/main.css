/* Loading component */

.loading:after {
  overflow: hidden;
  display: inline-block;
  vertical-align: bottom;
  -webkit-animation: ellipsis steps(4, end) 900ms infinite;
  animation: ellipsis steps(4, end) 900ms infinite;
  content: '\2026';
  width: 0px;
}

@keyframes ellipsis {
  to {
    width: 1.25em;
  }
}

@-webkit-keyframes ellipsis {
  to {
    width: 1.25em;
  }
}

/* ------------------------------------------------------- */

/* SplitText component */

@keyframes move-text {
	0% {
		bottom: -0.3em;
		opacity: 0;
	}

	100% {
		bottom: 0;
		opacity: 1;
	}
}

.splitText {
	animation: move-text 0.5s forwards;
	position: relative; 
}

/* ------------------------------------------------------- */

/* Custom cursor */

body, * {
  cursor: url("cursor.png"), auto !important;
}

/* ------------------------------------------------------- */

/* Search component */

.searchBorder:hover > svg {
  color: white;
}

@keyframes animateWidthIn {
  0% {
    width: 0;
  }
  100% {
    width: 18rem;
  }
}

@keyframes animateWidthOut {
  0% {
    width: 18rem;
  }
  100% {
    width: 0;
  }
}

@keyframes animateHeightIn {
  0% {
    height: 3rem;
  }
  100% {
    height: 18rem;
  }
}

@keyframes animateHeightOut {
  0% {
    height: 18rem;
  }
  100% {
    height: 3rem;
  }
}


.searchInput:focus {
  animation: animateWidthIn 0.25s forwards;
}
.searchInput:not(.searchInput:focus) {
  animation: animateWidthOut 0.25s forwards;
}
.searchBorder:has(.searchInput:focus) {
  animation: animateHeightIn 0.25s forwards;
}
.searchBorder:has(.searchInput:not(.searchInput:focus)) {
  animation: animateHeightOut 0.25s forwards;
}

.content:has(.searchInput:focus) > .contentWrapper {
  filter: blur(8px);
}